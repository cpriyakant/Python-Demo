name: Bandit Code Scan

on: 
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  bandit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit
        id: bandit_scan
        run: |
          bandit -r . --severity all --format json > bandit_output.json || true
          cat bandit_output.json

      - name: Analyze Bandit results
        id: analyze_bandit
        run: |
          set -e
          CRITICAL_VULNS=$(jq '.results | .[] | select(.issue_severity == "CRITICAL")' bandit_output.json | wc -l)
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "BLOCK=true" >> $GITHUB_ENV
          else:
            echo "BLOCK=false" >> $GITHUB_ENV
          fi

      - name: Block PR if Critical Vulnerabilities Found
        if: env.BLOCK == 'true'
        run: exit 1

      - name: Merge PR if No Critical Vulnerabilities Found
        if: env.BLOCK == 'false'
        run: exit 0

      - name: Determine Comment
        id: set_comment
        run: |
          if [ "$BLOCK" = "true" ]; then
            echo "comment=Block" >> $GITHUB_ENV
          else
            echo "comment=Successful" >> $GITHUB_ENV
          fi

      - name: Post Comment
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              body: process.env.comment
            })
